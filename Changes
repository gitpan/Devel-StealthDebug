Revision history for Perl extension Devel::StealthDebug.

0.001 Wed Jan 30 22:15:47 2002
	- original version; created by h2xs 1.21

0.002 Added show(), fixed many bugs (even more remaining though)

0.003 Polished a little bit the watch function

0.004 Mainly rewrote the doc

0.005 Wrote some tests

0.006 Add some more tests, fix some bugs

1.000 Renamed the module and thought to release it as the first public version

1.001 Tim BUNCE's special edition ;-)
	 	(FIRST PUBLIC VERSION RELEASED)

      Implemented few suggestions, renamed some methods according to his 
	  comments on the modules list.
	  
	  	show  -> dump
	  	wait  -> when
	  	print -> emit
	  	emit  -> emit_type
		
	  Added some tests.

	  And renamed this module (again) to its final name Devel::StealthDebug.

1.002 Yann KEHERVE's special edition (Yes, it's now a tradition)

		Thanks to his feedback, I 
		
	  Corrected some typos, completed the doc.
	  Corrected a bug with watch() under use strict.

1.003 Adam FOXSON's special edition

	  Modified the dump() function to display hash sorted by keys
	   (mainly to make t/dump.t consistent on different boxes)
	  Added the ENABLE feature on the use line (Idea from Tim Bunce, and
	  also asked by Yann...)

1.004	  Modified t/emit_type2.t to create file 'mydebug' in the test dir.
          (now remove it after the test)
	
1.005	  Corrected a bug in the test suite.

1.006 Daniel GARDNER's special edition

	  Who was kind enough not to only give me some (positive) feedback
	  but also provide some enhancements to the code :

	  	StealthDebug features are now disabled on commented lines
		(#my $foo=10; #!emit($foo)!) to avoid spurious debug messages
		on part of the code you've just commented out.

		'emit' feature received some extra DWIMess :
		namely the function is processed after the code beginning the line
		my $foo='hello'; #!emit("$foo world")!
		will now emit 'hello world' as most of you would expect...
		Same behaviour for 'dump' BUT NOT for 'assert'
		(this might change later as I'm not yet fixed, your opinion/feedback
		is most welcome on this point)
